/*
ごり押し問題でした.数の重複だけ見ればいいので簡単に見える.達人の回答を見てみる.
int main(){
    int a[4];

    for (int i = 0 ; i < 4 ; ++i) {
		>>a[i];
	}
	//整数配列に一要素ずつ入力
    sort(a, a + 4);//値をソート
    int ans = 0;
    for (int i = 1; i < 4 ; ++i){//現行要素と現行-1要素が等しいならans+=1
							     //1,7,3,3なら1,7,7,7,7なら3　わ〜よく考えたら一瞬で分かりますねこれ（笑）
        if (a[i] == a[i- 1]){
		ans+=1;
		}
	}
    cout << ans << endl;
}

*/

/********   All Required Header Files ********/
#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
#include <sstream>
#include <queue>
#include <deque>
#include <bitset>
#include <iterator>
#include <list>
#include <stack>
#include <map>
#include <set>
#include <functional>
#include <numeric>
#include <utility>
#include <limits>
#include <time.h>
#include <math.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <assert.h>
#include <conio.h>

using namespace std;

/*******  All Required define Pre-Processors and typedef Constants *******/
#define SCD(t) scanf("%d",&t)
#define SCLD(t) scanf("%ld",&t)
#define SCLLD(t) scanf("%lld",&t)
#define SCC(t) scanf("%c",&t)
#define SCS(t) scanf("%s",t)
#define SCF(t) scanf("%f",&t)
#define SCLF(t) scanf("%lf",&t)
#define MEM(a, b) memset(a, (b), sizeof(a))
#define FOR(i, j, k, in) for (int i=j ; i<k ; i+=in)
#define RFOR(i, j, k, in) for (int i=j ; i>=k ; i-=in)
#define REP(i, j) FOR(i, 0, j, 1)
#define RREP(i, j) RFOR(i, j, 0, 1)
#define all(cont) cont.begin(), cont.end()
#define rall(cont) cont.end(), cont.begin()
#define FOREACH(it, l) for (auto it = l.begin(); it != l.end(); it++)
#define IN(A, B, C) assert( B <= A && A <= C)
#define MP make_pair
#define PB push_back
#define INF (int)1e9
#define EPS 1e-9
#define PI 3.1415926535897932384626433832795
#define MOD 1000000007
#define read(type) readInt<type>()
const double pi = acos(-1.0);
typedef pair<int, int> PII;
typedef vector<int> VI;
typedef vector<string> VS;
typedef vector<PII> VII;
typedef vector<VI> VVI;
typedef map<int, int> MPII;
typedef set<int> SETI;
typedef multiset<int> MSETI;
typedef long int int32;
typedef unsigned long int uint32;
typedef long long int int64;
typedef unsigned long long int  uint64;

/****** Template of some basic operations *****/
template<typename T, typename U> inline void amin(T& x, U y) { if (y < x) x = y; }
template<typename T, typename U> inline void amax(T& x, U y) { if (x < y) x = y; }
/**********************************************/

/****** Template of Fast I/O Methods *********/
void inputA(int number) {
	VI a(number);
	FOR(i, 0, number, 1) {
		cin >> a[i];
	}

}
void inputA_B(int number) {
	VI a(number);
	VI b(number);
	FOR(i, 0, number, 1) {
		cin >> a[i] >> b[i];
	}

}
template <typename T> inline void write(T x)
{
	int i = 20;
	char buf[21];
	// buf[10] = 0;
	buf[20] = '\n';

	do
	{
		buf[--i] = x % 10 + '0';
		x /= 10;
	} while (x);
	do
	{
		putchar(buf[i]);
	} while (buf[i++] != '\n');
}

template <typename T> inline T readInt()
{
	T n = 0, s = 1;
	char p = getchar();
	if (p == '-')
		s = -1;
	while ((p < '0' || p>'9') && p != EOF && p != '-')
		p = getchar();
	if (p == '-')
		s = -1, p = getchar();
	while (p >= '0' && p <= '9') {
		n = (n << 3) + (n << 1) + (p - '0');
		p = getchar();
	}

	return n * s;
}



/********** Main()  function **********/
int main()
{
	vector <long int> s(4);
	int acount = 0;
	int ss = 0;
	for (int i = 0; i < 4; i++) {
	
		cin >> s[i];
	}
	long int a,b,c,d;
	vector <long int>  cd(4);
	a = std::count(s.begin(), s.end(), s[0]);
	b = std::count(s.begin(), s.end(), s[1]);
	c = std::count(s.begin(), s.end(), s[2]);
	d = std::count(s.begin(), s.end(), s[3]);
	
	cd[0] = a;
	cd[1] = b;
	cd[2] = c;
	cd[3] = d;
	std::sort(cd.begin(), cd.end());
	//cout << cd[0] << cd[1] << cd[2] << cd[3]<<endl;
	
	if (cd[0] == 4 && cd[1] == 4 && cd[2] == 4 && cd[3] == 4) {
		cout << 3 << endl;
	}
	else if (cd[0] == 1 && cd[1] == 1 && cd[2] == 2 && cd[3] == 2) {
		cout << 1 << endl;
	}
	else if (cd[0] == 2 && cd[1] == 2 && cd[2] == 2 && cd[3] == 2) {
		cout << 2 << endl;
	}
	else if (cd[0] == 1 && cd[1] == 1 && cd[2] == 1 && cd[3] == 1) {
		cout << 0 << endl;
	}
	else if (cd[0] == 1 && cd[1] == 3 && cd[2] == 3 && cd[3] == 3) {
		cout << 2 << endl;
	}
	return 0;
	}